importance_df <- importance_df[order(importance_df$Correlation, decreasing = TRUE),]
# Show top 20 variables by correlation
print("Top 20 variables by correlation magnitude:")
print(head(importance_df, 20))
# APPROACH 2: If you still want a small Random Forest (much simpler)
# Take only top 30 variables by correlation and a sample of data
if(nrow(df_rf_enriched) > 5000) {
# Use a small sample to keep it fast
set.seed(123)
sample_rows <- sample(1:nrow(df_rf_enriched), 5000)
df_sample <- df_rf_enriched[sample_rows, c("qc19", head(importance_df$Variable, 30))]
# Convert target to factor for classification
df_sample$qc19 <- as.factor(df_sample$qc19)
# Run a very small random forest
rf_small <- randomForest(
qc19 ~ .,
data = df_sample,
ntree = 50,  # Very small number of trees
importance = TRUE
)
# Plot importance
print("Random Forest Variable Importance (on reduced dataset):")
varImpPlot(rf_small)
}
correlation_plot(df_reduced)
###############################################################################
# ALL-IN-ONE CODE: 4 BLOCKS (DEMOGRAPHICS, PERSONAL IDENTITY, DISCRIMINATION, PARADATA)
###############################################################################
library(dplyr)
library(ggplot2)
# 1) Define your variable blocks ----------------------------------------------
#    Feel free to rename or move variables to the block you prefer.
#    We're assuming these columns exist in df_reduced.
# 1A) Demographics block (example variables)
block_demographics <- c(
"age", "gender", "education", "d8r2",
"occupation", "urban_rural", "financial_insecurity",
"social_class", "religion", "political_ideology",
"lgb_friends", "trans_friends"
)
# 1B) Personal Identity
block_personal_identity <- c(
"ethnic_minority", "skin_color_minority", "religious_minority",
"sexual_lgbt_minority", "disability_minority", "other_minority", "none_minority"
)
# 1C) Discrimination
block_discrimination <- c(
"trans_discrimination_country", "trans_discrimination_personal",
"trans_discrimination_workplace", "trans_discrimination_political",
"country_discrimination_efforts", "country_discrimination_efforts_recoded",
"trans_workplace_diversity", "trans_colleague", "trans_colleague_recoded",
"trans_child_relationship", "trans_child_relationship_recoded",
"lgb_rights", "same_sex_relationship", "same_sex_marriage",
"lgb_school_materials", "trans_school_materials", "intersex_school_materials",
"two_men_public_affection", "two_men_public_affection_recoded",
"two_women_public_affection", "two_women_public_affection_recoded",
"non_gendered_docs"
)
# 1D) Paradata
block_paradata <- c(
"interview_date",
"interview_start_time",
"interview_duration",
"interview_duration_recoded",
"people_present_during_interview",
"respondent_cooperation"
)
# We'll assume qc19 is your primary outcome of interest
outcome_var <- "qc19"
# 2) Define a helper function to plot correlations with qc19 ------------------
plot_corr_with_qc19 <- function(data, vars_block, outcome = "qc19", block_title = "Block") {
# Subset the data to these variables + outcome
needed_vars <- c(outcome, vars_block)
df_block <- data[, needed_vars, drop = FALSE]
# Keep only numeric columns
df_block_num <- df_block %>%
dplyr::select(where(is.numeric))
# Ensure outcome is present and numeric
stopifnot(outcome %in% names(df_block_num))
# Identify the other numeric vars
other_vars <- setdiff(names(df_block_num), outcome)
# Compute correlation with outcome
cor_df <- data.frame(
variable = other_vars,
correlation = sapply(other_vars, function(v) {
cor(df_block_num[[v]], df_block_num[[outcome]], use = "complete.obs")
})
)
# Sort by absolute correlation
cor_df <- cor_df %>% arrange(desc(abs(correlation)))
# Reorder factor levels so negative correlations plot at bottom
cor_df <- cor_df %>%
arrange(correlation) %>%
mutate(variable = factor(variable, levels = variable))
# Plot horizontal bar chart
ggplot(cor_df, aes(x = variable, y = correlation)) +
geom_col(fill = "#4682B4", width = 0.6) +
geom_text(
aes(label = sprintf("%.2f", correlation)),
hjust = ifelse(cor_df$correlation >= 0, -0.1, 1.1),
color = "black", size = 3.5
) +
coord_flip() +
scale_y_continuous(
limits = c(
min(cor_df$correlation) - 0.1,
max(cor_df$correlation) + 0.1
)
) +
labs(
title = paste0(block_title, ": Correlation with ", outcome),
x = NULL,
y = "Correlation"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 9),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank()
)
}
# 3) Generate bar charts for each block ---------------------------------------
#    We'll assume the main data frame is called df_reduced
# 3A) Demographics
plot_corr_with_qc19(df_reduced, block_demographics, outcome_var, "DEMOGRAPHICS")
# 3B) Personal Identity
plot_corr_with_qc19(df_reduced, block_personal_identity, outcome_var, "PERSONAL IDENTITY")
# 3C) Discrimination
plot_corr_with_qc19(df_reduced, block_discrimination, outcome_var, "DISCRIMINATION")
# 3D) Paradata
plot_corr_with_qc19(df_reduced, block_paradata, outcome_var, "PARADATA")
correlation_plot(df_reduced)
###############################################################################
# ALL-IN-ONE CODE: 4 BLOCKS (DEMOGRAPHICS, PERSONAL IDENTITY, DISCRIMINATION, PARADATA)
###############################################################################
library(dplyr)
library(ggplot2)
library(corrplot)
# 1) Define your variable blocks ----------------------------------------------
#    Feel free to rename or move variables to the block you prefer.
#    We're assuming these columns exist in df_reduced.
# 1A) Demographics block (example variables)
block_demographics <- c(
"age", "gender", "education", "d8r2",
"occupation", "urban_rural", "financial_insecurity",
"social_class", "religion", "political_ideology",
"lgb_friends", "trans_friends"
)
# 1B) Personal Identity
block_personal_identity <- c(
"ethnic_minority", "skin_color_minority", "religious_minority",
"sexual_lgbt_minority", "disability_minority", "other_minority", "none_minority"
)
# 1C) Discrimination
block_discrimination <- c(
"trans_discrimination_country", "trans_discrimination_personal",
"trans_discrimination_workplace", "trans_discrimination_political",
"country_discrimination_efforts", "country_discrimination_efforts_recoded",
"trans_workplace_diversity", "trans_colleague", "trans_colleague_recoded",
"trans_child_relationship", "trans_child_relationship_recoded",
"lgb_rights", "same_sex_relationship", "same_sex_marriage",
"lgb_school_materials", "trans_school_materials", "intersex_school_materials",
"two_men_public_affection", "two_men_public_affection_recoded",
"two_women_public_affection", "two_women_public_affection_recoded",
"non_gendered_docs"
)
# 1D) Paradata
block_paradata <- c(
"interview_date",
"interview_start_time",
"interview_duration",
"interview_duration_recoded",
"people_present_during_interview",
"respondent_cooperation"
)
# We'll assume qc19 is your primary outcome of interest
outcome_var <- "qc19"
# 2) Define a helper function to plot correlations with qc19 ------------------
plot_corr_with_qc19 <- function(data, vars_block, outcome = "qc19", block_title = "Block") {
# Subset the data to these variables + outcome
needed_vars <- c(outcome, vars_block)
df_block <- data[, needed_vars, drop = FALSE]
# Keep only numeric columns
df_block_num <- df_block %>%
dplyr::select(where(is.numeric))
# Ensure outcome is present and numeric
stopifnot(outcome %in% names(df_block_num))
# Identify the other numeric vars
other_vars <- setdiff(names(df_block_num), outcome)
# Compute correlation with outcome
cor_df <- data.frame(
variable = other_vars,
correlation = sapply(other_vars, function(v) {
cor(df_block_num[[v]], df_block_num[[outcome]], use = "complete.obs")
})
)
# Sort by absolute correlation
cor_df <- cor_df %>% arrange(desc(abs(correlation)))
# Reorder factor levels so negative correlations plot at bottom
cor_df <- cor_df %>%
arrange(correlation) %>%
mutate(variable = factor(variable, levels = variable))
# Plot horizontal bar chart
ggplot(cor_df, aes(x = variable, y = correlation)) +
geom_col(fill = "#4682B4", width = 0.6) +
geom_text(
aes(label = sprintf("%.2f", correlation)),
hjust = ifelse(cor_df$correlation >= 0, -0.1, 1.1),
color = "black", size = 3.5
) +
coord_flip() +
scale_y_continuous(
limits = c(
min(cor_df$correlation) - 0.1,
max(cor_df$correlation) + 0.1
)
) +
labs(
title = paste0(block_title, ": Correlation with ", outcome),
x = NULL,
y = "Correlation"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 9),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank()
)
}
# 3) Generate bar charts for each block ---------------------------------------
#    We'll assume the main data frame is called df_reduced
# 3A) Demographics
plot_corr_with_qc19(df_reduced, block_demographics, outcome_var, "DEMOGRAPHICS")
# 3B) Personal Identity
plot_corr_with_qc19(df_reduced, block_personal_identity, outcome_var, "PERSONAL IDENTITY")
# 3C) Discrimination
plot_corr_with_qc19(df_reduced, block_discrimination, outcome_var, "DISCRIMINATION")
# 3D) Paradata
plot_corr_with_qc19(df_reduced, block_paradata, outcome_var, "PARADATA")
correlation_plot(df_reduced)
###############################################################################
# ALL-IN-ONE CODE: 4 BLOCKS (DEMOGRAPHICS, PERSONAL IDENTITY, DISCRIMINATION, PARADATA)
###############################################################################
library(dplyr)
library(ggplot2)
library(corrplot)
library(corrr)
# 1) Define your variable blocks ----------------------------------------------
#    Feel free to rename or move variables to the block you prefer.
#    We're assuming these columns exist in df_reduced.
# 1A) Demographics block (example variables)
block_demographics <- c(
"age", "gender", "education", "d8r2",
"occupation", "urban_rural", "financial_insecurity",
"social_class", "religion", "political_ideology",
"lgb_friends", "trans_friends"
)
# 1B) Personal Identity
block_personal_identity <- c(
"ethnic_minority", "skin_color_minority", "religious_minority",
"sexual_lgbt_minority", "disability_minority", "other_minority", "none_minority"
)
# 1C) Discrimination
block_discrimination <- c(
"trans_discrimination_country", "trans_discrimination_personal",
"trans_discrimination_workplace", "trans_discrimination_political",
"country_discrimination_efforts", "country_discrimination_efforts_recoded",
"trans_workplace_diversity", "trans_colleague", "trans_colleague_recoded",
"trans_child_relationship", "trans_child_relationship_recoded",
"lgb_rights", "same_sex_relationship", "same_sex_marriage",
"lgb_school_materials", "trans_school_materials", "intersex_school_materials",
"two_men_public_affection", "two_men_public_affection_recoded",
"two_women_public_affection", "two_women_public_affection_recoded",
"non_gendered_docs"
)
# 1D) Paradata
block_paradata <- c(
"interview_date",
"interview_start_time",
"interview_duration",
"interview_duration_recoded",
"people_present_during_interview",
"respondent_cooperation"
)
# We'll assume qc19 is your primary outcome of interest
outcome_var <- "qc19"
# 2) Define a helper function to plot correlations with qc19 ------------------
plot_corr_with_qc19 <- function(data, vars_block, outcome = "qc19", block_title = "Block") {
# Subset the data to these variables + outcome
needed_vars <- c(outcome, vars_block)
df_block <- data[, needed_vars, drop = FALSE]
# Keep only numeric columns
df_block_num <- df_block %>%
dplyr::select(where(is.numeric))
# Ensure outcome is present and numeric
stopifnot(outcome %in% names(df_block_num))
# Identify the other numeric vars
other_vars <- setdiff(names(df_block_num), outcome)
# Compute correlation with outcome
cor_df <- data.frame(
variable = other_vars,
correlation = sapply(other_vars, function(v) {
cor(df_block_num[[v]], df_block_num[[outcome]], use = "complete.obs")
})
)
# Sort by absolute correlation
cor_df <- cor_df %>% arrange(desc(abs(correlation)))
# Reorder factor levels so negative correlations plot at bottom
cor_df <- cor_df %>%
arrange(correlation) %>%
mutate(variable = factor(variable, levels = variable))
# Plot horizontal bar chart
ggplot(cor_df, aes(x = variable, y = correlation)) +
geom_col(fill = "#4682B4", width = 0.6) +
geom_text(
aes(label = sprintf("%.2f", correlation)),
hjust = ifelse(cor_df$correlation >= 0, -0.1, 1.1),
color = "black", size = 3.5
) +
coord_flip() +
scale_y_continuous(
limits = c(
min(cor_df$correlation) - 0.1,
max(cor_df$correlation) + 0.1
)
) +
labs(
title = paste0(block_title, ": Correlation with ", outcome),
x = NULL,
y = "Correlation"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 9),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank()
)
}
# 3) Generate bar charts for each block ---------------------------------------
#    We'll assume the main data frame is called df_reduced
# 3A) Demographics
plot_corr_with_qc19(df_reduced, block_demographics, outcome_var, "DEMOGRAPHICS")
# 3B) Personal Identity
plot_corr_with_qc19(df_reduced, block_personal_identity, outcome_var, "PERSONAL IDENTITY")
# 3C) Discrimination
plot_corr_with_qc19(df_reduced, block_discrimination, outcome_var, "DISCRIMINATION")
# 3D) Paradata
plot_corr_with_qc19(df_reduced, block_paradata, outcome_var, "PARADATA")
correlation_plot(df_reduced)
corrplot(df_reduced)
corrplot(is.numeric(df_reduced))
# Step 1: Subset the numeric columns in df_reduced
df_reduced_numeric <- df_reduced[, sapply(df_reduced, is.numeric)]
# Step 2: Compute the correlation matrix of numeric columns
corr_matrix <- cor(df_reduced_numeric, use = "complete.obs")
# Step 3: Plot the correlation matrix with corrplot
corrplot(corr_matrix, method = "circle")
# 1) Select numeric columns
df_reduced_numeric <- df_reduced %>%
select_if(is.numeric)
# 2) Correlate them
df_cor <- df_reduced_numeric %>%
correlate()
# View your correlation matrix as a tibble
df_cor
# 3) Visualize correlation in a more human-readable form
# For instance, use rplot() to see a “tidy” correlation plot
df_cor %>%
rplot()
# You can also try network_plot() to see how variables cluster together
df_cor %>%
network_plot(min_cor = 0.3)  # adjust min_cor as needed
library(corrr)
library(dplyr)
# 1) Keep only numeric columns
df_reduced_numeric <- df_reduced %>%
select_if(is.numeric)
# 2) Correlate them
df_cor <- df_reduced_numeric %>%
correlate()
# 3) Rearrange (optional) + shave off the upper triangle + plot
df_cor %>%
rearrange(method = "cluster") %>%   # or "alphabetical", etc.
shave() %>%                         # by default, shaves the upper triangle
rplot()
# 1) Keep only numeric columns
df_reduced_numeric <- df_reduced %>%
select_if(is.numeric)
# 2) Correlate them
cor_df <- df_reduced_numeric %>%
correlate() %>%
rearrange("cluster") %>%  # optional, re-orders for clarity
shave()                   # shaves off the upper triangle
library(corrr)
library(dplyr)
# 1) Keep only numeric columns
df_reduced_numeric <- df_reduced %>%
select_if(is.numeric)
# 2) Correlate them
cor_df <- df_reduced_numeric %>%
correlate() %>%
rearrange("cluster") %>%  # optional, re-orders for clarity
shave()                   # shaves off the upper triangle
library(dplyr)
library(corrr)
# 1) Keep only numeric columns
df_reduced_numeric <- df_reduced %>%
select_if(is.numeric)
# 2) Correlate the numeric columns
cor_df <- correlate(df_reduced_numeric)
# 3) Stretch into a long format, then filter by your threshold
high_cor_pairs <- cor_df %>%
stretch() %>%
filter(abs(r) > 0.5, x != y)  # pick threshold, exclude self-correlations
high_cor_pairs
View(high_cor_pairs)
summary(df_rf_enriched$p13)
summary(df_rf_enriched$p12)
summary(df_rf_enriched$p11)
summary(df_rf_enriched$p10)
summary(df_rf_enriched$p9)
summary(df_rf_enriched$p8)
summary(df_rf_enriched$p7)
summary(df_rf_enriched$p6)
summary(df_rf_enriched$p5)
summary(df_rf_enriched$p4)
summary(df_rf_enriched$p3)
summary(df_rf_enriched$p2)
summary(df_rf_enriched$p1)
summary(df_rf_enriched$p1)
summary(data$d72_1)
summary(data$d1)
summary(df_rf_enriched$d77)
summary(df_rf_enriched$d72_1)
summary(df_rf_enriched$d72_2)
summary(df_rf_enriched$d63)
summary(df_rf_enriched$d60)
summary(df_rf_enriched$d43a)
summary(df_rf_enriched$d43b)
summary(df_rf_enriched$d43t)
summary(df_rf_enriched$d40)
summary(df_rf_enriched$d40c)
summary(df_rf_enriched$d40a)
summary(df_rf_enriched$d25)
summary(df_rf_enriched$d15a)
summary(df_rf_enriched$d15)
summary(df_rf_enriched$8)
summary(df_rf_enriched$d8)
summary(df_rf_enriched$d10)
summary(df_rf_enriched$d7)
summary(df_rf_enriched$d1)
summary(df_rf_enriched$qc20)
summary(df_rf_enriched$qc19)
summary(df_rf_enriched$qc18)
summary(df_rf_enriched$qc17_1)
summary(df_rf_enriched$qc17_7)
summary(df_rf_enriched$qc16_1)
summary(df_rf_enriched$qc15_3)
summary(df_rf_enriched$qc15_2)
summary(df_rf_enriched$qc15_1)
summary(df_rf_enriched$qc14)
summary(df_rf_enriched$d8)
summary(df_rf_enriched$d8r2)
summary(df_rf_enriched$qc13_10)
summary(df_rf_enriched$qc13_10r)
summary(df_rf_enriched$qc_7r)
summary(df_rf_enriched$qc_=7r)
summary(df_rf_enriched$qc7r)
summary(df_rf_enriched$qc7r=)
summary(df_rf_enriched$qc7)
summary(df_rf_enriched$qc12_1
summary(df_rf_enriched$qc12_1)
summary(df_rf_enriched$qc12_1)
summary(df_rf_enriched$qc11_1)
summary(df_rf_enriched$qc11_2)
summary(df_rf_enriched$qc11_3)
summary(df_rf_enriched$qc11_4)
summary(df_rf_enriched$qc11_5)
summary(df_rf_enriched$qc11_6)
summary(df_rf_enriched$qc11_7)
summary(df_rf_enriched$qc10)
summary(df_rf_enriched$qc9_1)
summary(df_rf_enriched$qc9_2)
ummary(df_rf_enriched$qc9_3)
summary(df_rf_enriched$qc9_3)
summary(df_rf_enriched$qc9_4)
summary(df_rf_enriched$qc9_5)
summary(df_rf_enriched$qc9_6)
summary(df_rf_enriched$qc9_7)
summary(df_rf_enriched$qc9_8)
summary(df_rf_enriched$qc9_9)
summary(df_rf_enriched$qc9_10
summary(df_rf_enriched$qc9_10)
summary(df_rf_enriched$qc7)
feature_extract_enet <- readRDS("~/Documents/GitHub/survey_research_2_assignment/regularization/feature_extract_enet.rds")
feature_extract_enet <- readRDS("~/Documents/GitHub/survey_research_2_assignment/regularization/feature_extract_enet.rds")
eature_extract_enet
view(feature_extract_enet)
summary(feature_extract_enet)
colnames(feature_extract_enet)
feature_extract_enet
feature_extract_lasso <- readRDS("~/Documents/GitHub/survey_research_2_assignment/regularization/feature_extract_lasso.rds")
feature_extract_lasso
df_rf_enriched <- readRDS("~/Documents/GitHub/survey_research_2_assignment/df_rf_enriched.rds")
summary(df_rf_enriched$d7r2)
View(df_rf_enriched)
